---
layout: post
title:  "C++"
date:   2020-11-10 10:11:11 +0100
comments: true
external-url:
categories: Languages
---

**C++**

---

It's a hard language to learn so it requires a lot of constant practice


* [Learn Advanced C++ Programming Course](https://github.com/NelsonBilber/cpp.udemy.advancedcpp) <br/> Udemy Course "Learn Advanced C++ Programming Course" an exclente course by John Purcell 

* [Template / Metaprogramming](https://github.com/NelsonBilber/cpp.metaprogramming) <br/>

	**Functions**
	
	[1. Arguments Deduction](https://github.com/NelsonBilber/cpp.templates.functions.1.arguments.deduction)
	
	[2. Explicit Specialization](https://github.com/NelsonBilber/cpp.templates.functions.2.explicit.specialization)
	
	[3. Non-Type Arguments](https://github.com/NelsonBilber/cpp.templates.functions.3.non-type.arguments)
	
	[4. Variadic Templates](https://github.com/NelsonBilber/cpp.templates.functions.4.variadic.templates)
	
	**Classes** 	
	
	
	[1. Basics](https://github.com/NelsonBilber/cpp.templates.class1.basic)
	
	[2. Explicit Specialization](https://github.com/NelsonBilber/cpp.templates.class2.explicit.specialization)
	
	[3. Partical Specialization](https://github.com/NelsonBilber/cpp.templates.class3.partial.specialization)
	
	[4. Alias](https://github.com/NelsonBilber/cpp.templates.class4.typealias)
	
 	

* [Functional Programming](https://github.com/NelsonBilber/cpp.functional.programming) 


* [Modern C++](https://github.com/NelsonBilber/cpp.moderncpp)  ... walkthrough for C++, C++11/14/17/20, ...  	

	[1. Lambda](https://github.com/NelsonBilber/cpp.lambdas) 
 	
 	
 	[2. Concepts](https://github.com/NelsonBilber/cpp.concepts) 
 	
 	
 	[3. Monads](https://github.com/NelsonBilber/cpp.monads) 
 	
 	
 	[4. Variadic Templates](https://github.com/NelsonBilber/cpp.variadic.templates)
 	
 	

* [Object Oriented Programming](https://github.com/NelsonBilber/cpp.oop) <br>

* [RAII](https://github.com/NelsonBilber/cpp.RAII) <br/>C++ Resource acquisition is initialization (RAII)

* [STL](https://github.com/NelsonBilber/cpp.stl) <br/> C++ Standard Template Library (STL)

* [Containers](https://github.com/NelsonBilber/cpp.containers) <br/> C++ Template Metaprogramming

* [Cast](https://github.com/NelsonBilber/cpp.cast) <br/> C++ cast <>() examples

* [Smart Pointers](https://github.com/NelsonBilber/cpp.smartpointers)<br/> Explore C++11 smartpointers

* [Loki](https://github.com/NelsonBilber/cpp.loki) <br/> Source Code from great book: "Modern C++ Design: Generic Programming and Design Patterns Applied


