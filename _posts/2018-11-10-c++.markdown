---
layout: post
title:  "C++"
date:   2018-11-10 10:11:11 +0100
comments: true
external-url:
categories: Languages
---

## C++

---

### Cpp-Overview (Github repository)

It's a hard language to learn so it requires a lot of constant practice. So i'm constantly update a github repository dedicated to C++.

[cpp-overview](https://github.com/NelsonBilber/cpp-overview)

- RAII, Containers, Rule of Three, Five and Zero, Exceptions, Linking, void*, …
- STL Containers and Iterators
- Lambdas ( recursive, *this), Concepts, Move semantics, Monads, C++ 17
- Argument Type Deduction, Explicit Specialization, Variadic Templates, Partial Specialization, Concepts ( C++20)
- Small example how to use std <functional>
- Working Queue Model” with Qt, std::future and std::promises
- How to use Google-tests for unit testing (TDD)
- Recommendations for libs and tricks during all development cycles
- Popular C++ libs
- Web courses to polish C++ code skills
- Recomended books that covers basic and advanced concepts and best practices
- Links, blogs, podcast, …


-----------------

### Direct access to popular topics


* [Learn Advanced C++ Programming Course](https://github.com/NelsonBilber/cpp.udemy.advancedcpp) <br/> Udemy Course "Learn Advanced C++ Programming Course" an exclente course by John Purcell 

-----------------

* [Template / Metaprogramming](https://github.com/NelsonBilber/cpp.metaprogramming) 
	
	**Functions**
	
	[1. Arguments Deduction](https://github.com/NelsonBilber/cpp.templates.functions.1.arguments.deduction) [2. Explicit Specialization](https://github.com/NelsonBilber/cpp.templates.functions.2.explicit.specialization) [3. Non-Type Arguments](https://github.com/NelsonBilber/cpp.templates.functions.3.non-type.arguments) [4. Variadic Templates](https://github.com/NelsonBilber/cpp.templates.functions.4.variadic.templates)
	
	**Classes** 	
	
	[1. Basics](https://github.com/NelsonBilber/cpp.templates.class1.basic) [2. Explicit Specialization](https://github.com/NelsonBilber/cpp.templates.class2.explicit.specialization) [3. Partical Specialization](https://github.com/NelsonBilber/cpp.templates.class3.partial.specialization) [4. Alias](https://github.com/NelsonBilber/cpp.templates.class4.typealias)

----------------

* [Functional Programming](https://github.com/NelsonBilber/cpp-overview/blob/master/docs/functional.org) 

* [Object Oriented Programming](https://github.com/NelsonBilber/cpp.oop)

----------------

* [Modern C++](https://github.com/NelsonBilber/cpp.moderncpp) 

	[1. Lambda](https://github.com/NelsonBilber/cpp-overview/blob/master/docs/modern.cpp.org) [2. Concepts](https://github.com/NelsonBilber/cpp.concepts) [3. Monads](https://github.com/NelsonBilber/cpp.monads) [4. Variadic Templates](https://github.com/NelsonBilber/cpp.variadic.templates) [5. Move semantics](https://github.com/NelsonBilber/cpp.movesemantics)
 	 	
----------------- 

* [C++ Standard Template Library (STL)](https://github.com/NelsonBilber/cpp.stl)

* [STL Containers and Iterators](https://github.com/NelsonBilber/cpp-overview/blob/master/docs/containers.and.iterators.org)

---------------- 

* [Multithreading](https://github.com/NelsonBilber/cpp-overview/blob/master/docs/multithreading.org)

* [C++ Resource acquisition is initialization (RAII)](https://github.com/NelsonBilber/cpp.RAII) 
	
* [Allocators](https://github.com/NelsonBilber/cpp.allocators.custom)

* [Cast](https://github.com/NelsonBilber/cpp.cast)

* [Smart Pointers](https://github.com/NelsonBilber/cpp.smartpointers)

* [Loki](https://github.com/NelsonBilber/cpp.loki) <br/> Source Code from great book: "Modern C++ Design: Generic Programming and Design Patterns Applied


